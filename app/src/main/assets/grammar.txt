# Basic guide:
# 1) A non-terminal symbol starts with a $
# 2) A -> B | C is equivalent to A -> B, A -> C
# 3) For every non-terminal, $A, there must be a class Expressions.Custom.A_Expression
# 4) That class must have the same number of constructor parameters as it has right-hand side
#    symbols in the rule, not counting anything that starts with an underscore, '_'.
# 5) Anything starting with '#' is a comment


# +,-
$Precedence1 -> $Addition | $Subtraction | $Precedence2 | testing
$Addition -> $Precedence1 _+ $Precedence2
$Subtraction -> $Precedence1 _- $Precedence2 | ε _- $Precedence2

# *,/,%
$Precedence2 -> $Multiplication | $Division | $Modulo | $Precedence3
$Multiplication -> $Precedence2 _* $Precedence3 | $Precedence2 $Precedence3
$Division -> $Precedence2 _/ $Precedence3
$Modulo -> $Precedence2 _% $Precedence3

# ^
$Precedence3 -> $Power | $Precedence4
$Power -> $Precedence3 _^ $Precedence4 | _pow _( $Precedence1 _, $Precedence1 _)

# TODO: add $OR, $XOR, etc...
$Precedence4 -> $AND | $Precedence5
$AND -> $Precedence4 _and $Precedence5

$Precedence5 -> _( $Precedence1 _) | $Function | $Constant | $Number

$Number -> int | float | hexint | binint | octint

$Function -> $Sin | $Cos | $Tan | $Log | $Ln | $Exp | $Sqrt

$Sin -> _sin _( $Precedence1 _)
$Cos -> _cos _( $Precedence1 _)
$Tan -> _tan _( $Precedence1 _)
$Log -> _log _( $Precedence1 _, $Precedence1 _) | _log _( $Precedence1 _)
$Ln -> _ln _( $Precedence1 _)
$Sqrt -> _sqrt _( $Precedence1 _)
$Exp -> _exp _( $Precedence1 _)

$Constant -> $Pi | $E | $Phi
$Pi -> _pi | _π
$E -> _e
$Phi -> _phi | _ϕ