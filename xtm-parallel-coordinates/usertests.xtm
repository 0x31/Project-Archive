
(bind-func pre_loop
  (lambda ()
    ;(nvg_clear)
    (nvgBeginFrame vg width height pixel_ratio)
    (nvgResetTransform vg)
    ))

(bind-func post_loop
  (lambda ()
    (nvgEndFrame vg)
    ;(set! data (transform_data data1))
    (glfwPollEvents)
    (set_bg vg)
    (glfwSwapBuffers window)
    ))


(bind-func draw_title
  (lambda (title:i8* bounds)
  (dv_draw_title vg bounds title)
    ))


(bind-func nvg_scatter_loop2
    (lambda (time:i64 delta_t:double until:i64 dataset:Dataset* dataset-goal:Dataset* transition:double increment:double tr1:bool tr2:bool label:i8*)
      (pre_loop)
      (let (
        (sc1_rect:Rect* (Rect (* 0.02 (convert width)) (* 0.05 (convert height)) (* 0.45 (convert width)) (* 0.90 (convert height))))
        (sc2_rect:Rect* (Rect (* 0.45 (convert width)) (* 0.05 (convert height)) (* 0.45 (convert width)) (* 0.90 (convert height))))

            )
        (draw_title label sc1_rect)
        (sp_transition_data sc1_rect dataset dataset-goal 0 1 transition tr1 tr2)
        (sp_transition_data sc2_rect dataset dataset-goal 1 0 transition tr1 tr2)
        (post_loop)
      )
      (let ((next_time (+ time (convert (* 44100. delta_t)))))
        (if (< next_time until)
        (callback next_time nvg_scatter_loop2 next_time delta_t until dataset dataset-goal (+ increment transition) increment tr1 tr2 label)
        void))
      ))

(bind-func nvg_scatter_loop
    (lambda (time:i64 delta_t:double until:i64 dataset:Dataset* dataset-goal:Dataset* transition:double increment:double tr1:bool tr2:bool label:i8*)
      (pre_loop)
      (let (
              (sc1_rect:Rect* (Rect (* 0.02 (convert width)) (* 0.02 (convert height)) (* 0.46 (convert width)) (* 0.96 (convert height))))
              (sc2_rect:Rect* (Rect (* 0.52 (convert width)) (* 0.02 (convert height)) (* 0.46 (convert width)) (* 0.96 (convert height))))
           )
        ;(draw_title label sc1_rect)
        (sp_transition_data sc1_rect dataset dataset-goal 0 1 transition tr1 tr2)
        (sp_transition_data sc2_rect dataset dataset-goal 1 2 transition tr1 tr2)
        (post_loop)
      )
      (let ((next_time (+ time (convert (* 44100. delta_t)))))
        (if (< next_time until)
        (callback next_time nvg_scatter_loop next_time delta_t until dataset dataset-goal (+ increment transition) increment tr1 tr2 label)
        void))
      ))

(bind-func nvg_transition_loop_no_centroids
    (lambda (time:i64 delta_t:double until:i64 dataset:Dataset* dataset-goal:Dataset* transition:double increment:double tr1:bool tr2:bool tr3:bool tr4:bool label:i8*)
      (let ( (parallel_rect:Rect* (Rect (* 0.0 (convert width)) (* 0.05 (convert height)) (* 1.0 (convert width)) (* 0.9 (convert height)))))
        (pre_loop)
        (draw_title label parallel_rect)
        (pc_no_centroids parallel_rect dataset dataset-goal transition tr1 tr2 tr3 tr4)
      )

      (post_loop)
      (let ((next_time (+ time (convert (* 44100. delta_t)))))
        (if (< next_time until)
        (callback next_time nvg_transition_loop_no_centroids next_time delta_t until dataset dataset-goal (+ increment transition) increment tr1 tr2 tr3 tr4 label)
        void))
      ))


(bind-func nvg_loop
    (lambda ()
      (let ( (parallel_rect:Rect* (Rect (* 0.25 (convert width)) (* 0.05 (convert height)) (* 0.755 (convert width)) (* 0.5 (convert height))))
            ;(scatter_rect:Rect* (Rect (* 0.35 (convert width)) (* 0.05 (convert height)) (* 0.255 (convert width)) (* 0.5 (convert height))))
            (data (load_dataset "simple.csv" 2)))
            (set-data (list "simple.csv"))
            (set! data (load_dataset "simple.csv" (tref (tref data 0) 0) 2))
            (println "going...")
            (set-global-range)
            (pset! global-range 0 (Range 0.0 5.0))
            (pset! global-range 1 (Range 0.0 5.0))
            (pset! global-range 2 (Range 0.0 5.0))
            (pset! global-range 3 (Range 0.0 5.0))
            (pset! global-range 4 (Range 0.0 5.0))
            (pset! global-range 5 (Range 0.0 5.0))

        (pre_loop)
        ;(set-data (list "simple.csv"))
        ;(draw_title label parallel_rect)
        (pc_no_centroids parallel_rect data data 0.0 #f #f #f #f)
        ;(sp_transition_data scatter_rect data data 0 1 0.0 #f #f)
      )



      (post_loop)
      #t
      ))

(bind-func nvg_transition_loop
    (lambda (time:i64 delta_t:double until:i64 dataset:Dataset* dataset-goal:Dataset* transition:double increment:double tr1:bool tr2:bool tr3:bool tr4:bool label:i8*)
      (let ( (parallel_rect:Rect* (Rect (* 0.0 (convert width)) (* 0.05 (convert height)) (* 1.0 (convert width)) (* 0.9 (convert height)))))
        (pre_loop)
        (draw_title label parallel_rect)
        (pc_transition_data parallel_rect dataset dataset-goal transition tr1 tr2 tr3 tr4)
      )

      (post_loop)
      (let ((next_time (+ time (convert (* 44100. delta_t)))))
        (if (< next_time until)
        (callback next_time nvg_transition_loop next_time delta_t until dataset dataset-goal (+ increment transition) increment tr1 tr2 tr3 tr4 label)
        void))
      ))

((bind-func blank
  (lambda ()
      (pre_loop)
      (post_loop)
    )))

(bind-func test_no1
  (lambda (when ll)
    (printf "Running ")
    (set-data ll)
    (let ( (label "Test 1")

          (last when)
          (step (/ 1. 20.))
          (i:i64 0))
      (printf "%s\n" label)
      (dotimes (i (- data-count 1))
        (let ((t1 last)
              (t2 (+ t1 (* 44100 5)))
              (t3 (+ t2 (* 44100 1)))
              (t4 (+ t3 (* 44100 1)))
              (t5 (+ t4 (/ 44100 4))))
          (callback t1 nvg_transition_loop t1 step t2 (pref all_datasets i) (pref all_datasets i )       0.0 (/ 1.0 (- (/ (/ (- (convert t2) (convert t1)) 44100.0) step) 1.0))  #f #f #f #f label)
          (callback t2 nvg_transition_loop t2 step t3 (pref all_datasets i) (pref all_datasets (+ i 1 )) 0.0 (/ 1.0 (- (/ (/ (- (convert t3) (convert t2)) 44100.0) step) 1.0))  #t #t #f #f label)
          (callback t3 nvg_transition_loop t3 step t4 (pref all_datasets i) (pref all_datasets (+ i 1))  0.0 (/ 1.0 (- (/ (/ (- (convert t4) (convert t3)) 44100.0) step) 1.0))  #f #f #t #f label)
          (callback t4 nvg_transition_loop t4 step t5 (pref all_datasets i) (pref all_datasets (+ i 1))  0.0 (/ 1.0 (/ (/ (- (convert t5) (convert t4)) 44100.0) step))          #f #f #f #t label)
          (set! last t5)))
        (let ((last2 (+ last (* 44100 5))))
          (callback last nvg_transition_loop last step last2 (pref all_datasets (- data-count 1)) (pref all_datasets (- data-count 1)) 0.0 0.0 #f #f #f #f label)
          ;(callback last2 blank)
          (+ last2 (* 2 44100))
        ))))


(bind-func test_no1
  (lambda (when ll)
    (printf "Running ")
    (set-data ll)
    (let ( (label "Test 1")

          (last when)
          (step (/ 1. 20.))
          (i:i64 0))
      (printf "%s\n" label)
      (callback last nvg_transition_loop last step last (pref all_datasets 0) (pref all_datasets 1)  0.8 (/ 1.0 (- (/ (/ (- (convert last) (convert last)) 44100.0) step) 1.0))  #f #f #t #t label)
      last
    )))
(main)

(bind-func test_no2
  (lambda (when ll)
    (printf "Running ")
    (set-data ll)
    (let ( (label "Test 2")

          (last when)
          (step (/ 1. 20.))
          (i:i64 0))
      (printf "%s\n" label)
      (dotimes (i (- data-count 1))
        (println i)
        (let ((t1 last)
              (t2 (+ t1 (* 44100 5)))
              (t3 (+ t2 (* 44100 2)))
              (t4 (+ t3 (/ 44100 2))))
          (callback t1 nvg_scatter_loop t1 step t2 (pref all_datasets i) (pref all_datasets i )      0.0 (/ 1.0 (- (/ (/ (- (convert t2) (convert t1)) 44100.0) step) 1.0)) #f #f label)
          (callback t2 nvg_scatter_loop t2 step t3 (pref all_datasets i) (pref all_datasets (+ i 1)) 0.0 (/ 1.0 (- (/ (/ (- (convert t3) (convert t2)) 44100.0) step) 1.0)) #t #f label)
          (callback t3 nvg_scatter_loop t3 step t4 (pref all_datasets i) (pref all_datasets (+ i 1)) 0.0 (/ 1.0 (- (/ (/ (- (convert t4) (convert t3)) 44100.0) step) 1.0)) #f #t label)
          (set! last t4)))
        (let ((last2 (+ last (* 44100 5))))
          (callback last nvg_scatter_loop last step last2 (pref all_datasets (- data-count 1)) (pref all_datasets (- data-count 1)) 0.0 0.0 #f #f label)
          (callback last2 blank)
          (+ last2 (* 2 44100))
        ))))


(bind-func test_no3
  (lambda (when ll)
    (printf "Running ")
    (set-data ll)
    (let ( (label "Test 3")

          (last when)
          (step (/ 1. 20.))
          (i:i64 0))
      (printf "%s\n" label)
      (dotimes (i (- data-count 1))
        (let ((t1 last)
              (t2 (+ t1 (* 44100 5)))
              (t3 (+ t2 (* 44100 2)))
              (t4 (+ t3 (* 44100 0)))
              (t5 (+ t4 (/ 44100 2))))
          (callback t1 nvg_transition_loop_no_centroids t1 step t2 (pref all_datasets i) (pref all_datasets i )       0.0 (/ 1.0 (- (/ (/ (- (convert t2) (convert t1)) 44100.0) step) 1.0))  #f #f #f #f label)
          (callback t2 nvg_transition_loop_no_centroids t2 step t3 (pref all_datasets i) (pref all_datasets (+ i 1 )) 0.0 (/ 1.0 (- (/ (/ (- (convert t3) (convert t2)) 44100.0) step) 1.0))  #t #f #f #f label)
          ;(callback t3 nvg_transition_loop_no_centroids t3 step t4 (pref all_datasets i) (pref all_datasets (+ i 1))  0.0 (/ 1.0 (- (/ (/ (- (convert t4) (convert t3)) 44100.0) step) 1.0))  #f #f #t #f label)
          (callback t4 nvg_transition_loop_no_centroids t4 step t5 (pref all_datasets i) (pref all_datasets (+ i 1))  0.0 (/ 1.0 (/ (/ (- (convert t5) (convert t4)) 44100.0) step))          #f #f #f #t label)
          (set! last t5)))
        (let ((last2 (+ last (* 44100 5))))
          (callback last nvg_transition_loop_no_centroids last step last2 (pref all_datasets (- data-count 1)) (pref all_datasets (- data-count 1)) 0.0 0.0 #f #f #f #f label)
          ;(callback last2 blank)
          (+ last2 (* 2 44100))
        ))))


(bind-func test_no4
  (lambda (when)
    (printf "Running ")
    (set-data (list "csv/school2010-15.csv" "csv/school2010-75.csv"))
    (let ( (label "Test 4")

          (last when)
          (step (/ 1. 20.))
          (i:i64 0))
      (printf "%s\n" label)
      (dotimes (i (- data-count 1))
        (let ((t1 last)
              (t2 (+ t1 (* 44100 4)))
              (t3 (+ t2 (* 44100 1)))
              (t4 (+ t3 (* 44100 1)))
              (t5 (+ t4 (/ 44100 2))))
          (callback t1 nvg_transition_loop t1 step t2 (pref all_datasets i) (pref all_datasets i )       0.0 (/ 1.0 (- (/ (/ (- (convert t2) (convert t1)) 44100.0) step) 1.0))  #f #f #f #f label)
          (callback t2 nvg_transition_loop t2 step t3 (pref all_datasets i) (pref all_datasets (+ i 1 )) 0.0 (/ 1.0 (- (/ (/ (- (convert t3) (convert t2)) 44100.0) step) 1.0))  #t #t #f #f label)
          (callback t3 nvg_transition_loop t3 step t4 (pref all_datasets i) (pref all_datasets (+ i 1))  0.0 (/ 1.0 (- (/ (/ (- (convert t4) (convert t3)) 44100.0) step) 1.0))  #f #f #t #f label)
          (callback t4 nvg_transition_loop t4 step t5 (pref all_datasets i) (pref all_datasets (+ i 1))  0.0 (/ 1.0 (/ (/ (- (convert t5) (convert t4)) 44100.0) step))          #f #f #f #t label)
          (set! last t5)))
        (let ((last2 (+ last (* 44100 2))))
          (callback last nvg_transition_loop last step last2 (pref all_datasets (- data-count 1)) (pref all_datasets (- data-count 1)) 0.0 0.0 #f #f #f #f label)
          last2
        ))))


(bind-func test_no5
  (lambda (when)
    (printf "Running ")
    (set-data (list "csv/school2010-15.csv" "csv/school2010-75.csv"))
    (let ( (label "Test 5")

          (last when)
          (step (/ 1. 20.))
          (i:i64 0))
      (printf "%s\n" label)
      (dotimes (i (- data-count 1))
        (println i)
        (let ((t1 last)
              (t2 (+ t1 (* 44100 4)))
              (t3 (+ t2 (* 44100 2)))
              (t4 (+ t3 (/ 44100 4))))
          (callback t1 nvg_scatter_loop t1 step t2 (pref all_datasets i) (pref all_datasets i )      0.0 (/ 1.0 (- (/ (/ (- (convert t2) (convert t1)) 44100.0) step) 1.0)) #f #f label)
          (callback t2 nvg_scatter_loop t2 step t3 (pref all_datasets i) (pref all_datasets (+ i 1)) 0.0 (/ 1.0 (- (/ (/ (- (convert t3) (convert t2)) 44100.0) step) 1.0)) #t #f label)
          (callback t3 nvg_scatter_loop t3 step t4 (pref all_datasets i) (pref all_datasets (+ i 1)) 0.0 (/ 1.0 (- (/ (/ (- (convert t4) (convert t3)) 44100.0) step) 1.0)) #f #t label)
          (set! last t4)))
        (let ((last2 (+ last (* 44100 2))))
          (callback last nvg_scatter_loop last step last2 (pref all_datasets (- data-count 1)) (pref all_datasets (- data-count 1)) 0.0 0.0 #f #f label)
          last2
        ))))


(bind-func test_no7
  (lambda (when)
    (printf "Running ")
    (set-data (list "csv/school1995-small.csv" "csv/school2010-small.csv"))
    (let ( (label "Test 7")

          (last when)
          (step (/ 1. 20.))
          (i:i64 0))
      (printf "%s\n" label)
      (dotimes (i (- data-count 1))
        (let ((t1 last)
              (t2 (+ t1 (* 44100 4)))
              (t3 (+ t2 (* 44100 2)))
              (t4 (+ t3 (* 44100 2)))
              (t5 (+ t4 (/ 44100 2))))
          (callback t1 nvg_transition_loop t1 step t2 (pref all_datasets i) (pref all_datasets i )       0.0 (/ 1.0 (- (/ (/ (- (convert t2) (convert t1)) 44100.0) step) 1.0))  #f #f #f #f label)
          (callback t2 nvg_transition_loop t2 step t3 (pref all_datasets i) (pref all_datasets (+ i 1 )) 0.0 (/ 1.0 (- (/ (/ (- (convert t3) (convert t2)) 44100.0) step) 1.0))  #t #t #f #f label)
          (callback t3 nvg_transition_loop t3 step t4 (pref all_datasets i) (pref all_datasets (+ i 1))  0.0 (/ 1.0 (- (/ (/ (- (convert t4) (convert t3)) 44100.0) step) 1.0))  #f #f #t #f label)
          (callback t4 nvg_transition_loop t4 step t5 (pref all_datasets i) (pref all_datasets (+ i 1))  0.0 (/ 1.0 (/ (/ (- (convert t5) (convert t4)) 44100.0) step))          #f #f #f #t label)
          (set! last t5)))
        (let ((last2 (+ last (* 44100 2))))
          (callback last nvg_transition_loop last step last2 (pref all_datasets (- data-count 1)) (pref all_datasets (- data-count 1)) 0.0 0.0 #f #f #f #f label)
          last2
        ))))



(bind-func test_no8
  (lambda (when)
    (printf "Running ")
    (set-data (list "csv/school1995-small.csv" "csv/school2010-small.csv"))
    (let ( (label "")

          (last when)
          (step (/ 1. 20.))
          (i:i64 0))
      (printf "%s\n" label)
      (dotimes (i (- data-count 1))
        (println i)
        (let ((t1 last)
              (t2 (+ t1 (* 44100 4)))
              (t3 (+ t2 (* 44100 2)))
              (t4 (+ t3 (/ 44100 6))))
          (callback t1 nvg_scatter_loop2 t1 step t2 (pref all_datasets i) (pref all_datasets i )      0.0 (/ 1.0 (- (/ (/ (- (convert t2) (convert t1)) 44100.0) step) 1.0)) #f #f label)
          (callback t2 nvg_scatter_loop2 t2 step t3 (pref all_datasets i) (pref all_datasets (+ i 1)) 0.0 (/ 1.0 (- (/ (/ (- (convert t3) (convert t2)) 44100.0) step) 1.0)) #t #f label)
          (callback t3 nvg_scatter_loop2 t3 step t4 (pref all_datasets i) (pref all_datasets (+ i 1)) 0.0 (/ 1.0 (- (/ (/ (- (convert t4) (convert t3)) 44100.0) step) 1.0)) #f #t label)
          (set! last t4)))
        (let ((last2 (+ last (* 44100 2))))
          (callback last nvg_scatter_loop2 last step last2 (pref all_datasets (- data-count 1)) (pref all_datasets (- data-count 1)) 0.0 0.0 #f #f label)
          last2
        ))))


(bind-func test_no9
  (lambda (when)
    (printf "Running ")
    (set-data (list "csv/school1995-small.csv" "csv/school2010-small.csv"))

    (let ( (label "Test 3")

          (last when)
          (step (/ 1. 20.))
          (i:i64 0))
      (printf "%s\n" label)
      (dotimes (i (- data-count 1))
        (let ((t1 last)
              (t2 (+ t1 (* 44100 6)))
              (t3 (+ t2 (* 44100 2)))
              (t4 (+ t3 (* 44100 2)))
              (t5 (+ t4 (/ 44100 4))))
          (callback t1 nvg_transition_loop_no_centroids t1 step t2 (pref all_datasets i) (pref all_datasets i )       0.0 (/ 1.0 (- (/ (/ (- (convert t2) (convert t1)) 44100.0) step) 1.0))  #f #f #f #f label)
          (callback t2 nvg_transition_loop_no_centroids t2 step t3 (pref all_datasets i) (pref all_datasets (+ i 1 )) 0.0 (/ 1.0 (- (/ (/ (- (convert t3) (convert t2)) 44100.0) step) 1.0))  #t #t #f #f label)
          (callback t3 nvg_transition_loop_no_centroids t3 step t4 (pref all_datasets i) (pref all_datasets (+ i 1))  0.0 (/ 1.0 (- (/ (/ (- (convert t4) (convert t3)) 44100.0) step) 1.0))  #f #f #t #f label)
          (callback t4 nvg_transition_loop_no_centroids t4 step t5 (pref all_datasets i) (pref all_datasets (+ i 1))  0.0 (/ 1.0 (/ (/ (- (convert t5) (convert t4)) 44100.0) step))          #f #f #f #t label)
          (set! last t5)))
        (let ((last2 (+ last (* 44100 2))))
          (callback last nvg_transition_loop_no_centroids last step last2 (pref all_datasets (- data-count 1)) (pref all_datasets (- data-count 1)) 0.0 0.0 #f #f #f #f label)
          last2
        ))))


;($ (blank))

(bind-func loop1
  (lambda (n:i64 dataset transition tr1 tr2 tr3 tr4)
      (let ((data:Data* (tref dataset 0))
            (parallel_rect:Rect* (Rect (* 0.0 (convert width)) (* 0.05 (convert height)) (* 1.0 (convert width)) (* 0.9 (convert height))))
            )
        (tset! data 1 n)
      ;(printf "Going for %i" (tref (tref dataset 0) 1))
      (nvg_clear)
      (nvgBeginFrame vg width height pixel_ratio)
      (nvgResetTransform vg)
      (pc_animation parallel_rect dataset dataset transition tr1 tr2 tr3 tr4)
      (nvgEndFrame vg)
      ;(set! data (transform_data data1))
      (glfwPollEvents)
      (set_bg vg)
      (glfwSwapBuffers window)
      )
  ))

  (bind-func loop2
    (lambda (dataset transition tr1 tr2 tr3 tr4)
        (let (
              (parallel_rect:Rect* (Rect (* 0.0 (convert width)) (* 0.05 (convert height)) (* 1.0 (convert width)) (* 0.9 (convert height))))
              )
        ;(printf "Going for %i" (tref (tref dataset 0) 1))
        (nvg_clear)
        (nvgBeginFrame vg width height pixel_ratio)
        (nvgResetTransform vg)
        (pc_no_centroids parallel_rect dataset dataset transition tr1 tr2 tr3 tr4)
        (nvgEndFrame vg)
        ;(set! data (transform_data data1))
        (glfwPollEvents)
        (set_bg vg)
        (glfwSwapBuffers window)
        )
    ))


(bind-func test_no11
  (lambda (when)
    (printf "Running ")
    (set-data (list "csv/school2000two.csv" "csv/school2000two.csv"))
    (let ( (label "Test 3")

          (last when)
          (next (+ last (* 1 44100)))
          (step (/ 1. 30.))
          (i:i64 0)
          (dataset (pref all_datasets (- data-count 1)))
          (n (tref (tref dataset 0) 1))
          (clusters (tref (pref all_datasets 0) 1))
          )
      ;(dotimes (i n)
      ;    (pset! clusters i 0)
      ;  )
      (callback last nvg_transition_loop last step last (pref all_datasets 0) (pref all_datasets 1)  0.0 (/ 1.0 (/ (/ (- (convert next) (convert last)) 44100.0) step))          #f #f #f #f label)
      (set! last (+ (* 4 44100) last))
      (set! next (+ (* 1 44100) last))
      (callback last nvg_transition_loop last step next (pref all_datasets 0) (pref all_datasets 1)  0.0 (/ 1.0 (/ (/ (- (convert next) (convert last)) 44100.0) step))          #f #t #f #f label)

      ;(callback when loop2 dataset step #f #f #f #t)
      ;(set! last (+ last (* 4 44100)))
      ;(dotimes (i n)
      ;  (callback last loop1 i dataset 0.0 #f #f #f #f)
      ;  (set! last (+ last (convert (/ 44100.0 1000.0))))
      ;)
      last
  )))


(bind-func test_no12
  (lambda (when)
    (printf "Running ")
    (set-data (list "csv/school2010-double.csv" "csv/school1995-double.csv"))
    (let ( (label "Test 1")

          (last when)
          (step (/ 1. 20.))
          (i:i64 0))
      (printf "%s\n" label)
      (dotimes (i (- data-count 1))
        (let ((t1 last)
              (t2 (+ t1 (* 44100 2)))
              (t3 (+ t2 (* 44100 2)))
              (t4 (+ t3 (/ 44100 2)))
              (t5 (+ t4 (/ 44100 2))))
          (callback t1 nvg_transition_loop t1 step t2 (pref all_datasets i) (pref all_datasets (+ i 1) )       0.0 (/ 1.0 (- (/ (/ (- (convert t2) (convert t1)) 44100.0) step) 1.0))  #t #t #f #f "    Set 1/2")
          (callback t2 nvg_transition_loop t2 step t3 (pref all_datasets i) (pref all_datasets (+ i 1 )) 0.0 (/ 1.0 (- (/ (/ (- (convert t3) (convert t2)) 44100.0) step) 1.0))  #f #f #t #f "    Set 1/2")
          (callback t3 nvg_transition_loop t3 step t4 (pref all_datasets i) (pref all_datasets (+ i 1))  0.0 (/ 1.0 (- (/ (/ (- (convert t4) (convert t3)) 44100.0) step) 1.0))  #f #f #f #t "    Set 1/2")
          ;(callback t4 nvg_transition_loop t4 step t5 (pref all_datasets i) (pref all_datasets (+ i 1))  0.0 (/ 1.0 (/ (/ (- (convert t5) (convert t4)) 44100.0) step))          #f #f #f #t "    Set 1/2")
          (set! last t5)))
        (let ((last2 (+ last (* 44100 2))))
          (callback last nvg_transition_loop last step last2 (pref all_datasets (- data-count 1)) (pref all_datasets (- data-count 1)) 0.0 0.0 #f #f #f #f "    Set 2")
          last2
        ))))




(bind-func nvg_transition_loop2
    (lambda (time:i64 delta_t:double until:i64 dataset:Dataset* dataset-goal:Dataset* transition:double increment:double tr1:bool tr2:bool tr3:bool tr4:bool label:i8*)
      (let ( (scatter_rect1:Rect* (Rect (* 0.02 (convert width)) (* 0.02 (convert height)) (* 0.4 (convert width)) (* 0.45 (convert height))))
             (scatter_rect2:Rect* (Rect (* 0.02 (convert width)) (* 0.52 (convert height)) (* 0.4 (convert width)) (* 0.45 (convert height))))
             (parallel_rect1:Rect* (Rect (* 0.42 (convert width)) (* 0.02 (convert height)) (* 0.65 (convert width)) (* 0.45 (convert height))))
             (parallel_rect2:Rect* (Rect (* 0.42 (convert width)) (* 0.52 (convert height)) (* 0.65 (convert width)) (* 0.45 (convert height))))
             (z:i64 0)
           )
        (pre_loop)
        (draw_title "Scatter Plots" scatter_rect1 )
        (draw_title "Parallel, No Centroids" parallel_rect1 )
        (draw_title "Parallel, With Centroids" parallel_rect2 )
        (if (= tr3 #f)
          (sp_transition_data scatter_rect1 dataset dataset-goal 0 1 transition tr1 tr4)
          (sp_transition_data scatter_rect1 dataset dataset-goal 0 1 1.0 #t tr4))
        (if (= tr3 #f)
          (sp_transition_data scatter_rect2 dataset dataset-goal 1 2 transition tr1 tr4)
          (sp_transition_data scatter_rect2 dataset dataset-goal 1 2 1.0 #t tr4))
        (pc_no_centroids    parallel_rect1 dataset dataset-goal transition tr1 tr2 tr3 tr4)
        (pc_transition_data parallel_rect2 dataset dataset-goal transition tr1 tr2 tr3 tr4)
      )

      (post_loop)
      (let ((next_time (+ time (convert (* 44100. delta_t)))))
        (if (< next_time until)
        (callback next_time nvg_transition_loop2 next_time delta_t until dataset dataset-goal (+ increment transition) increment tr1 tr2 tr3 tr4 label)
        void))
      ))




(bind-func test_no13
  (lambda (when)
    (printf "Running ")
    (set-data (list "csv/school1995-small2.csv" "csv/school2010-small2.csv" "csv/school1995-small2.csv"))
    (let ( (label "Test 1")

          (last when)
          (step (/ 1. 15.))
          (i:i64 0))
      (printf "%s\n" label)
      (dotimes (i (- data-count 1))
        (let ((t1 last)
              (t2 (+ t1 (* 44100 2)))
              (t3 (+ t2 (* 44100 2)))
              (t4 (+ t3 (+ 44100 2)))
              (t5 (+ t4 (/ 44100 2))))
          (callback t1 nvg_transition_loop2 t1 step t2 (pref all_datasets i) (pref all_datasets (+ i 1) ) 0.0 (/ 1.0 (- (/ (/ (- (convert t2) (convert t1)) 44100.0) step) 1.0))  #f #f #f #f "    Set 1/2")
          (callback t2 nvg_transition_loop2 t2 step t3 (pref all_datasets i) (pref all_datasets (+ i 1 )) 0.0 (/ 1.0 (- (/ (/ (- (convert t3) (convert t2)) 44100.0) step) 1.0))  #t #t #f #f "    Set 1/2")
          (callback t3 nvg_transition_loop2 t3 step t4 (pref all_datasets i) (pref all_datasets (+ i 1))  0.0 (/ 1.0 (- (/ (/ (- (convert t4) (convert t3)) 44100.0) step) 1.0))  #f #f #t #f "    Set 1/2")
          (callback t4 nvg_transition_loop2 t4 step t5 (pref all_datasets i) (pref all_datasets (+ i 1))  0.0 (/ 1.0 (/ (/ (- (convert t5) (convert t4)) 44100.0) step))          #f #f #f #t "    Set 1/2")
          (set! last t5)))
        (let ((last2 (+ last (* 44100 2))))
          (callback last nvg_transition_loop2 last step last2 (pref all_datasets (- data-count 1)) (pref all_datasets (- data-count 1)) 0.0 0.0 #f #f #f #f "    Set 2")
          last2
        ))))


(bind-func test_no15
  (lambda (when:i64 data)
    (printf "Running ")
    (set-data data)
    (let ( (label "Test 1")

          (last when)
          (i:i64 0)
          (d1 (pref all_datasets 0))
          (d2 (pref all_datasets 1))
          (cl1 (tref d1 1))
          (cl2 (tref d2 1))
          (ce1 (tref d1 2))
          (ce2 (tref d2 2))
          (r2r:i64 0)
          (r2b:i64 0)
          (b2b:i64 0)
          (b2r:i64 0)
          (n (tref (tref d1 0) 1))
          )
        (println n)
        (dotimes (i n)
          (let ((acl1 (pref cl1 i))
                (acl2 (pref cl2 i)))
            (if (= acl1 1)
              (if (= acl2 1)
                (set! b2b (+ 1 b2b))
                (set! b2r (+ 1 b2r))
              )
              (if (= acl2 1)
                (set! r2b (+ 1 r2b))
                (set! r2r (+ 1 r2r))
              )
            )
          )
          )
          (printf "b2b: %i\n" b2b)
          (printf "b2r: %i\n" b2r)
          (printf "r2b: %i\n" r2b)
          (printf "r2r: %i\n" r2r)
          (println (pref ce1 0))
          (println (pref ce1 1))
          (println (pref ce1 2))
          (println (pref ce1 3))
          (println (pref ce1 4))
          (println (pref ce1 5))
          (println "")
          (println (pref ce2 0))
          (println (pref ce2 1))
          (println (pref ce2 2))
          (println (pref ce2 3))
          (println (pref ce2 4))
          (println (pref ce2 5))
          0
        )))


(bind-func main
  (lambda ()
    (let (  (data (list "csv/school1995-small2.csv" "csv/school2010-small2.csv"))
            (t1 (test_no1 (now) data))
        )
      (println "Done...")
      #t
    )))
(main)
